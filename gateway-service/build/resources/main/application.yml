server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
#token:
#  secret: user_token

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, bus-refresh, info, prometheus, metrics

spring:
  application:
    name: gateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway GlobalFilter
            preLogger: true
            postLogger: true
      routes:
        - id: user-service
          uri: lb://USER-SERVICE # 로드 밸런서:서비스 이름 => Spring Cloud gateway 에서 자동으로 로드 밸런서 동작을 한다.
          predicates:
            - Path=/user-service/login # 로그인
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # 앞부분의 내용을 , 뒤에처럼 변경해서 요청

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users # 회원가입
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter

        - id: catalog-service

          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/catalog-service/(?<segment>.*), /$\{segment}

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/order-service/(?<segment>.*), /$\{segment}


# Service Discovery 사용 안하는 경우
#Spring:
#  application:
#    name: apigateway-service
#  cloud:
#    gateway:
#      # yml 에서 필터 및 라우팅 설정
#      routes:
#        - id: first-service
#          uri: http://localhost:8081/
#          predicates:
#            - Path=/first-service/**
#          filters:
#            # 헤더값 추가
#            - AddRequestHeader = first-request, first-requests-header2
#            - AddResponseHeader = first-response, first-response-header2
#            # 커스텀 필터 적용
#            - CustomFilter
#        - id: second-service
#          uri: http://localhost:8082/
#          predicates:
#            - Path=/second-service/**
#          filters:
#            # 헤더값 추가
#            - AddRequestHeader = first-request, first-requests-header2
#            - AddResponseHeader = first-response, first-response-header2
#            # 커스텀 필터 적용
#            - CustomFilter
#            # 커스텀 필터 적용 (매개 변수 사용)
#            - name: loggingFilter
#              args:
#                baseMessage: Spring Cloud Gateway GlobalFilter
#                preLogger: true
#                postLogger: true
#      # 공통 필터 설정
#      default-filters:
#        - name: GlobalFilter
#          args:
#            baseMessage: Spring Cloud Gateway GlobalFilter
#            preLogger: true
#            postLogger: true


